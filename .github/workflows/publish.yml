name: Publish to npm

on:
  push:
    branches: [main]
    paths:
      - "package.json"
      - "package-lock.json"
      - "bun.lock"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-publish: ${{ steps.should-publish.outputs.should-publish }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for tags

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Get latest git tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tags found"
          else
            echo "Latest tag: $LATEST_TAG"
          fi

      - name: Check if should publish
        id: should-publish
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          LATEST_TAG="${{ steps.latest-tag.outputs.latest_tag }}"

          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tag found, will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          elif [ "v$VERSION" != "$LATEST_TAG" ]; then
            echo "Version $VERSION differs from latest tag $LATEST_TAG, will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION matches latest tag $LATEST_TAG, skipping publish"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          fi

  test-and-build:
    needs: check-version
    if: needs.check-version.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        env:
          TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
        run: bun test

      - name: Type check
        run: bun run type-check

      - name: Build
        run: bun run build

      - name: Verify build output
        run: |
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "Error: dist directory is empty or missing"
            exit 1
          fi
          echo "Build output verified"
          ls -la dist/

  publish:
    needs: [check-version, test-and-build]
    if: needs.check-version.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build
        run: bun run build

      - name: Setup npm
        uses: actions/setup-node@v4
        with:
          registry-url: "https://registry.npmjs.org"
          scope: ""

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create git tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="v$VERSION"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push tag
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Release v${{ steps.version.outputs.version }}

            Automated release from GitHub Actions.

            ### Changes
            See [commit history](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}) for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
